import logging
from random import randint
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types.input_file import FSInputFile

from config import TOKEN, CHANNEL_ID
import asyncio
import os
from valute_translator import get_course_rub

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

try:
    os.mkdir("users")
except Exception:
    pass


class Uyan(StatesGroup):
    calculate_price = State()


class Ruble(StatesGroup):
    calculate_price = State()


class Certificate(StatesGroup):
    name = State()
    phone_number = State()
    price = State()


class Order(StatesGroup):
    scrin = State()
    link = State()
    price = State()
    adress = State()
    name = State()
    size = State()
    phone_number = State()
    ready = State()


KEYBOARD_START = [
    [types.KeyboardButton(text="–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–óüõç"), types.KeyboardButton(text="–°–û–ó–î–ê–¢–¨ –°–ï–†–¢–ò–§–ò–ö–ê–¢üéÅ")],
    [types.KeyboardButton(text="–ü–ï–†–ï–í–ï–°–¢–ò –Æ–ê–ù–ò –í –†–£–ë–õ–òüí¥")],
]

KEYBOARD_BACK = [
    [types.KeyboardButton(text="–í–ï–†–ù–£–¢–¨–°–Ø –û–ë–†–ê–¢–ù–û‚¨ÖÔ∏è")],
]

KEYBOARD_PRICES = [
    [types.KeyboardButton(text="1000‚ÇΩ"), types.KeyboardButton(text="2500‚ÇΩ"), types.KeyboardButton(text="4000‚ÇΩ")],
    [types.KeyboardButton(text="5000‚ÇΩ"), types.KeyboardButton(text="7500‚ÇΩ"), types.KeyboardButton(text="10000‚ÇΩ")]
]


@dp.message(Command('start'))
async def start_message(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_START,
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É"
    )
    photo = FSInputFile("logo.png", filename=os.path.basename("logo.png"))
    await bot.send_photo(message.chat.id, photo=photo)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–Ω–Ω—ã–π —Ç–≥ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å Poizon. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ '
                         '–æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', reply_markup=keyboard)


@dp.message(F.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ‚¨ÖÔ∏è")
async def start_message(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_START,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    )
    photo = FSInputFile("logo.png", filename=os.path.basename("logo.png"))
    await bot.send_photo(message.chat.id, photo=photo)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–Ω–Ω—ã–π —Ç–≥ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å Poizon. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ '
                         '–æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', reply_markup=keyboard)


@dp.message(F.text.lower() == "–ø–æ–º–æ—â—å")
async def help_message(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    await message.answer('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ –ø–æ–º–æ—â—å', reply_markup=keyboard)


@dp.message(F.text == "–ü–ï–†–ï–í–ï–°–¢–ò –Æ–ê–ù–ò –í –†–£–ë–õ–òüí¥")
async def calculate_price_start(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö, —è –ø–µ—Ä–µ–≤–µ–¥—É –í–∞–º –≤ —Ä—É–±–ª–∏', reply_markup=keyboard)
    await state.set_state(Uyan.calculate_price)


@dp.message(Uyan.calculate_price)
async def calculate_price(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        price = int(message.text)
        print(price)
        new_price = get_course_rub(price)
        print(new_price)
        await message.answer(f"{price}¬• = {new_price}‚ÇΩ", reply_markup=keyboard)
        await state.clear()  # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    except Exception:
        pass


@dp.message(F.text == "–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–óüõç")
async def make_order(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    id = str(message.chat.id)
    try:
        os.rmdir(f"users/{id}")
    except Exception:
        pass
    try:
        os.mkdir(f"users/{id}")
    except Exception:
        pass
    photo = FSInputFile(f'warning_first.jpg.', filename=os.path.basename("warning_first.jpg"))
    await bot.send_photo(message.chat.id, photo=photo)
    photo = FSInputFile(f'warning_second.jpg', filename=os.path.basename("warning_second.jpg"))
    await bot.send_photo(message.chat.id, photo=photo)
    await bot.send_message(message.chat.id,
                           "‚ùó –ú—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —Å —Ç–∞–∫–∏–º –∑–Ω–∞–∫–æ–º, –∫–∞–∫ –Ω–∞ –ø–µ—Ä–≤–æ–º —Ñ–æ—Ç–æ. –¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–∫–∞–∑—ã, –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–æ–ª—É–±—ã–º –∏ —á–µ—Ä–Ω—ã–º ‚ùó")
    photo = FSInputFile(f'example_scrin.jpg', filename=os.path.basename("example_scrin.jpg"))
    await bot.send_photo(message.chat.id, photo=photo)
    await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ üôå",
                           reply_markup=keyboard)
    await state.set_state(Order.scrin)


@dp.message(Order.scrin)
async def make_order(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    if message.photo:
        file_name = f"users/{message.chat.id}/order_photo.png"
        await bot.download(message.photo[-1], destination=file_name)

        photo = FSInputFile(f'example_link.jpg', filename=os.path.basename("example_link.jpg"))
        await bot.send_photo(message.chat.id, photo=photo)
        await bot.send_message(message.chat.id,
                               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –≤–∑—è–≤ –µ–µ —Ç–∞–∫–∂–µ, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ üì¶",
                               reply_markup=keyboard)
        await state.set_state(Order.link)


@dp.message(Order.link)
async def make_order(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        with open(f'users/{message.chat.id}/order.txt', "w") as file:
            file.truncate(0)
            file.write(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {message.text}\n")
    except Exception:
        pass
    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ üè†",
                           reply_markup=keyboard)
    await state.set_state(Order.adress)


@dp.message(Order.adress)
async def make_order(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        with open(f'users/{message.chat.id}/order.txt', "a") as file:
            file.write(f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {message.text}\n")
    except Exception:
        pass
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û üñãÔ∏è",
                           reply_markup=keyboard)
    await state.set_state(Order.name)


@dp.message(Order.name)
async def make_order(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        with open(f'users/{message.chat.id}/order.txt', "a") as file:
            file.write(f"–§–ò–û: {message.text}\n")
    except Exception:
        pass
    await bot.send_message(message.chat.id,
                           "–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–±—É–≤–∏). –ï—Å–ª–∏ –¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫",
                           reply_markup=keyboard)
    await state.set_state(Order.size)


@dp.message(Order.size)
async def make_order(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        with open(f'users/{message.chat.id}/order.txt', "a") as file:
            file.write(f"–†–∞–∑–º–µ—Ä: {message.text}\n")
    except Exception:
        pass
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±",
                           reply_markup=keyboard)
    await state.set_state(Order.phone_number)


@dp.message(Order.phone_number)
async def make_order(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        with open(f'users/{message.chat.id}/order.txt', "a") as file:
            file.write(f"–ù–æ–º–µ—Ä  —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}\n")
            try:
                file.write(f"–¢–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n")
            except Exception:
                file.write("–¢–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    except Exception:
        pass
    photo = FSInputFile(f'users/{message.chat.id}/order_photo.png', filename=os.path.basename("order_photo.png"))
    await bot.send_photo(message.chat.id, photo=photo)
    await bot.send_photo(CHANNEL_ID, photo=photo)
    order_text = ""
    with open(f'users/{message.chat.id}/order.txt', 'r') as file:
        order_text = file.read()
    await bot.send_message(CHANNEL_ID, order_text)
    await bot.send_message(message.chat.id, order_text)

    await bot.send_message(message.chat.id,
                           "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                           reply_markup=keyboard)
    await state.clear()


"""
@dp.message(F.text == "–ù–ê–¶–ï–ù–ö–ê –ó–ê –î–û–°–¢–ê–í–ö–£üöö")
async def price_order(message: types.message):
    with open("price_orders.txt", "r", encoding="UTF-8") as file:
        await bot.send_message(message.chat.id, file.read())
"""


@dp.message(F.text == "–°–û–ó–î–ê–¢–¨ –°–ï–†–¢–ò–§–ò–ö–ê–¢üéÅ")
async def certificate_order(message: types.message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_PRICES,
        resize_keyboard=True
    )
    with open("certificate_order", 'r', encoding="UTF-8") as file:
        await bot.send_message(message.chat.id, file.read())
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ üíµ", reply_markup=keyboard)
    await state.set_state(Certificate.price)


@dp.message(Certificate.price)
async def certiicate_order(message: types.message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    with open(f'users/{message.chat.id}/certificate.txt', "w", encoding="UTF-8") as file:
        file.truncate(0)
    with open(f'users/{message.chat.id}/certificate.txt', "a", encoding="UTF-8") as file:
        file.write(f"Summ certificate: {message.text[:-1]}\n")
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û, –Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", reply_markup=keyboard)
    await state.set_state(Certificate.name)


@dp.message(Certificate.name)
async def certiicate_order(message: types.message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        with open(f'users/{message.chat.id}/certificate.txt', "a") as file:
            file.write(f"–§–ò–û –æ—Ñ–æ—Ä–º–ª—è—é—â–µ–≥–æ: {message.text}\n")
    except Exception:
        pass
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=keyboard)
    await state.set_state(Certificate.phone_number)


@dp.message(Certificate.phone_number)
async def certiicate_order(message: types.message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    code = randint(1000000, 10000000)
    try:
        with open(f'users/{message.chat.id}/certificate.txt', "a") as file:
            file.write(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}\n")
            file.write(f"–ö–æ–¥ —Å–µ—Ä–∏—Ñ–∏–∫–∞—Ç–∞: {code}\n")
            file.write(f"–¢–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: @{message.from_user.username}\n")
    except Exception:
        pass
    try:
        with open(f'users/{message.chat.id}/certificate.txt', 'r') as file:
            order_text = file.read()
        await bot.send_message(CHANNEL_ID, f'–°–ï–†–¢–ò–§–ò–ö–ê–¢\n{order_text}')
        await bot.send_message(message.chat.id,
                               f'{order_text}‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ–¥–∞–Ω–∞! –°–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã')
    except Exception:
        pass
    await bot.send_message(message.chat.id,
                           "‚ùó–í–ê–ñ–ù–û‚ùó\n–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –±–µ–∑ –Ω–µ–≥–æ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—é!",
                           reply_markup=keyboard)
    await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        print("Bot's working has been started...")
        asyncio.run(main())
    except Exception as e:
        print(f"Something is going wrong: {e}")
