import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types.input_file import FSInputFile
from config import TOKEN
import asyncio
import os
from valute_translator import get_course_cny, get_course_rub

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()


class Uyan(StatesGroup):
    calculate_price = State()


class Ruble(StatesGroup):
    calculate_price = State()


KEYBOARD_START = [
    [types.KeyboardButton(text="–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–óüõç")],
    [types.KeyboardButton(text="–ü–ï–†–ï–í–ï–°–¢–ò –Æ–ê–ù–ò –í –†–£–ë–õ–òüí¥")],
    [types.KeyboardButton(text="–ü–ï–†–ï–í–ï–°–¢–ò –†–£–ë–õ–ò –í –Æ–ê–ù–òüí¥")],
    [types.KeyboardButton(text="–ü–û–ú–û–©–¨")],
]

KEYBOARD_BACK = [
    [types.KeyboardButton(text="–í–ï–†–ù–£–¢–¨–°–Ø –û–ë–†–ê–¢–ù–û‚¨ÖÔ∏è")],
]


@dp.message(Command('start'))
async def start_message(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_START,
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É"
    )
    photo = FSInputFile("logo.png", filename=os.path.basename("logo.png"))
    await bot.send_photo(message.chat.id, photo=photo)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–Ω–Ω—ã–π —Ç–≥ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å Poizon. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ '
                         '–æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', reply_markup=keyboard)


@dp.message(F.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ‚¨ÖÔ∏è")
async def start_message(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_START,
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É"
    )
    photo = FSInputFile("logo.png", filename=os.path.basename("logo.png"))
    await bot.send_photo(message.chat.id, photo=photo)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–Ω–Ω—ã–π —Ç–≥ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å Poizon. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ '
                         '–æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', reply_markup=keyboard)


@dp.message(F.text.lower() == "–ø–æ–º–æ—â—å")
async def help_message(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    await message.answer('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ –ø–æ–º–æ—â—å', reply_markup=keyboard)


@dp.message(F.text == "–ü–ï–†–ï–í–ï–°–¢–ò –Æ–ê–ù–ò –í –†–£–ë–õ–òüí¥")
async def calculate_price_start(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö, —è –ø–µ—Ä–µ–≤–µ–¥—É –í–∞–º –≤ —é–∞–Ω–∏', reply_markup=keyboard)
    await state.set_state(Uyan.calculate_price)


@dp.message(Uyan.calculate_price)
async def calculate_price(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        price = int(message.text)
        print(price)
        new_price = get_course_cny(price)
        print(new_price)
        await message.answer(f"{price} RUB = {new_price} CNY", reply_markup=keyboard)
        await state.clear()  # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    except Exception:
        pass


@dp.message(F.text == "–ü–ï–†–ï–í–ï–°–¢–ò –†–£–ë–õ–ò –í –Æ–ê–ù–òüí¥")
async def calculate_price_start(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö, —è –ø–µ—Ä–µ–≤–µ–¥—É –í–∞–º –≤ —é–∞–Ω–∏', reply_markup=keyboard)
    await state.set_state(Ruble.calculate_price)


@dp.message(Ruble.calculate_price)
async def calculate_price(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=KEYBOARD_BACK,
        resize_keyboard=True
    )
    try:
        price = int(message.text)
        # print(price)
        new_price = get_course_rub(price)
        # print(new_price)
        await message.answer(f"{price} RUB = {new_price} CNY", reply_markup=keyboard)
        await state.clear()  # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    except Exception:
        pass

@dp.message(F.text == "–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–óüõç")
async def make_order(message: types.Message):
    await ()

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        print("Bot's working has been started...")
        asyncio.run(main())
    except Exception as e:
        print(f"Something is going wrong: {e}")
